{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Printgramm where

-- pretty-printer generated by the BNF converter

import Absgramm
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Prog where
  prt i e = case e of
   DProg declarations -> prPrec i 0 (concatD [prt 0 declarations])


instance Print Declaration where
  prt i e = case e of
   DFunc funcdecl -> prPrec i 0 (concatD [prt 0 funcdecl])
   DVarDecl vardecl -> prPrec i 0 (concatD [prt 0 vardecl])
   DStructDecl id fielddecls -> prPrec i 0 (concatD [doc (showString "struct") , prt 0 id , doc (showString "{") , prt 0 fielddecls , doc (showString "}")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print FuncDecl where
  prt i e = case e of
   SFuncDecl typeident id funcparams stmts -> prPrec i 0 (concatD [prt 0 typeident , prt 0 id , doc (showString "(") , prt 0 funcparams , doc (showString ")") , doc (showString "{") , prt 0 stmts , doc (showString "}")])


instance Print FieldDecl where
  prt i e = case e of
   SFieldDecl typeident id -> prPrec i 0 (concatD [prt 0 typeident , prt 0 id , doc (showString ";")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print TypeIdent where
  prt i e = case e of
   TInt  -> prPrec i 0 (concatD [doc (showString "int")])
   TBool  -> prPrec i 0 (concatD [doc (showString "bool")])
   TChar  -> prPrec i 0 (concatD [doc (showString "char")])
   TString  -> prPrec i 0 (concatD [doc (showString "string")])
   TVoid  -> prPrec i 0 (concatD [doc (showString "void")])
   TStruct id -> prPrec i 0 (concatD [prt 0 id])
   TFunc typeidents typeident -> prPrec i 0 (concatD [doc (showString "Func") , doc (showString "<") , prt 0 typeidents , prt 0 typeident , doc (showString ">")])
   TPtr typeident -> prPrec i 0 (concatD [doc (showString "Ptr") , doc (showString "<") , prt 0 typeident , doc (showString ">")])
   TArray typeident -> prPrec i 0 (concatD [doc (showString "Array") , doc (showString "<") , prt 0 typeident , doc (showString ">")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print FuncParam where
  prt i e = case e of
   SFuncParam typeident id -> prPrec i 0 (concatD [prt 0 typeident , prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print VarDecl where
  prt i e = case e of
   SVarDecl typeident id initexpr -> prPrec i 0 (concatD [prt 0 typeident , prt 0 id , prt 0 initexpr , doc (showString ";")])


instance Print InitExpr where
  prt i e = case e of
   ENonInit  -> prPrec i 0 (concatD [])
   EValInit expr -> prPrec i 0 (concatD [doc (showString "=") , prt 0 expr])


instance Print Stmt where
  prt i e = case e of
   SVarDeclS vardecl -> prPrec i 0 (concatD [prt 0 vardecl])
   SValAssign bindexpr expr -> prPrec i 0 (concatD [prt 0 bindexpr , doc (showString "=") , prt 0 expr , doc (showString ";")])
   SWhileS expr stmts -> prPrec i 0 (concatD [doc (showString "while") , doc (showString "(") , prt 0 expr , doc (showString ")") , doc (showString "{") , prt 0 stmts , doc (showString "}")])
   SForS forinit expr0 bindexpr expr stmts -> prPrec i 0 (concatD [doc (showString "for") , doc (showString "(") , prt 0 forinit , prt 0 expr0 , doc (showString ";") , prt 0 bindexpr , doc (showString "=") , prt 0 expr , doc (showString ")") , doc (showString "{") , prt 0 stmts , doc (showString "}")])
   SIfS expr stmts elsestmt -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 expr , doc (showString ")") , doc (showString "{") , prt 0 stmts , doc (showString "}") , prt 0 elsestmt])
   SFuncInvS funcinvoke -> prPrec i 0 (concatD [prt 0 funcinvoke , doc (showString ";")])
   SReturnExpr expr -> prPrec i 0 (concatD [doc (showString "return") , prt 0 expr , doc (showString ";")])
   SReturn  -> prPrec i 0 (concatD [doc (showString "return") , doc (showString ";")])
   SBreak  -> prPrec i 0 (concatD [doc (showString "break") , doc (showString ";")])
   SContinue  -> prPrec i 0 (concatD [doc (showString "continue") , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print ElseStmt where
  prt i e = case e of
   SElse stmts -> prPrec i 0 (concatD [doc (showString "else") , doc (showString "{") , prt 0 stmts , doc (showString "}")])
   SElseEmpty  -> prPrec i 0 (concatD [])


instance Print BindExpr where
  prt i e = case e of
   EDeref bindexpr -> prPrec i 0 (concatD [doc (showString "*") , prt 0 bindexpr])
   EBVar id -> prPrec i 1 (concatD [prt 0 id])
   EFldAccs bindexpr id -> prPrec i 1 (concatD [prt 1 bindexpr , doc (showString ".") , prt 0 id])
   EArrAccs bindexpr expr -> prPrec i 1 (concatD [prt 1 bindexpr , doc (showString "[") , prt 0 expr , doc (showString "]")])


instance Print ForInit where
  prt i e = case e of
   SForInit vardecl -> prPrec i 0 (concatD [prt 0 vardecl])
   SSkip  -> prPrec i 0 (concatD [doc (showString ";")])


instance Print Expr where
  prt i e = case e of
   EAdd expr0 expr -> prPrec i 0 (concatD [prt 0 expr0 , doc (showString "+") , prt 1 expr])
   ESub expr0 expr -> prPrec i 0 (concatD [prt 0 expr0 , doc (showString "-") , prt 1 expr])
   EOr expr0 expr -> prPrec i 0 (concatD [prt 0 expr0 , doc (showString "||") , prt 1 expr])
   EMul expr0 expr -> prPrec i 1 (concatD [prt 1 expr0 , doc (showString "*") , prt 2 expr])
   EDiv expr0 expr -> prPrec i 1 (concatD [prt 1 expr0 , doc (showString "/") , prt 2 expr])
   EMod expr0 expr -> prPrec i 1 (concatD [prt 1 expr0 , doc (showString "%") , prt 2 expr])
   EAnd expr0 expr -> prPrec i 1 (concatD [prt 1 expr0 , doc (showString "&&") , prt 2 expr])
   EEq expr0 expr -> prPrec i 2 (concatD [prt 2 expr0 , doc (showString "==") , prt 3 expr])
   ENeq expr0 expr -> prPrec i 2 (concatD [prt 2 expr0 , doc (showString "!=") , prt 3 expr])
   ELt expr0 expr -> prPrec i 2 (concatD [prt 2 expr0 , doc (showString "<") , prt 3 expr])
   EGt expr0 expr -> prPrec i 2 (concatD [prt 2 expr0 , doc (showString ">") , prt 3 expr])
   ELEt expr0 expr -> prPrec i 2 (concatD [prt 2 expr0 , doc (showString "<=") , prt 3 expr])
   EGEt expr0 expr -> prPrec i 2 (concatD [prt 2 expr0 , doc (showString ">=") , prt 3 expr])
   EBNeg expr -> prPrec i 3 (concatD [doc (showString "!") , prt 3 expr])
   EBindEx bindexpr -> prPrec i 4 (concatD [prt 0 bindexpr])
   ERef bindexpr -> prPrec i 4 (concatD [doc (showString "&") , prt 0 bindexpr])
   EInt n -> prPrec i 4 (concatD [prt 0 n])
   EChar c -> prPrec i 4 (concatD [prt 0 c])
   EString str -> prPrec i 4 (concatD [prt 0 str])
   ETrue  -> prPrec i 4 (concatD [doc (showString "true")])
   EFalse  -> prPrec i 4 (concatD [doc (showString "false")])
   EArrCr typeident expr -> prPrec i 4 (concatD [doc (showString "new") , prt 0 typeident , doc (showString "[") , prt 0 expr , doc (showString "]")])
   EFuncInvoke funcinvoke -> prPrec i 4 (concatD [prt 0 funcinvoke])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print FuncInvoke where
  prt i e = case e of
   FFuncInvoke id exprs -> prPrec i 0 (concatD [prt 0 id , doc (showString "(") , prt 0 exprs , doc (showString ")")])



